rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // --- Users Collection ---
    match /users/{userId} {
      allow read: if request.auth != null;

      // Allow users to create/update their own profile, but not delete
      allow create, update: if request.auth.uid == userId;
      allow delete: if false; 
    }

    // --- Courses Collection ---
    match /courses/{courseId} {
      allow read: if true; // Allow everyone to read courses

      // Teachers and supervisors can create, update, and delete
      allow create, update, delete: if request.auth != null && request.auth.token.userType in ['teacher', 'supervisor']; 

      // --- Modules Subcollection ---
      match /modules/{moduleId} {
        allow read: if true; 

        // Teachers and supervisors can create, update, and delete
        allow create, update, delete: if request.auth != null && request.auth.token.userType in ['teacher', 'supervisor'];

        // --- Resources Subcollection ---
        match /resources/{resourceId} {
          allow read: if true; 

          // Only teachers and supervisors can create, update, and delete
          allow create, update, delete: if request.auth != null && request.auth.token.userType in ['teacher', 'supervisor'];
        }

        // --- Quizzes Subcollection ---
        match /quizzes/{quizId} {
          // Only authenticated users (students) can read quizzes
          allow read: if request.auth != null;

          // Only teachers can create, update, and delete
          allow create, update, delete: if request.auth != null && request.auth.token.userType == 'teacher'; 

          // --- Questions Subcollection ---
          match /questions/{questionId} {
            // Only authenticated users can read questions
            allow read: if request.auth != null; 

            // Only teachers can manage questions
            allow create, update, delete: if request.auth != null && request.auth.token.userType == 'teacher';
          }
        }
      }

      // --- Comments Subcollection (New) --- 
      match /comments/{commentId} {
        allow read: if true; 

        allow create: if request.auth != null 
            && request.resource.data.courseId == courseId // Make sure comment belongs to course 
            && request.resource.data.author == request.auth.uid;  // Only the comment author can create

        allow update, delete: if request.auth.uid == resource.data.author  
                               || request.auth.token.userType == 'teacher'; // Author or teacher can update/delete
      }

      // --- Reviews Subcollection ---
      match /reviews/{reviewId} {
        allow read: if true; // Allow anyone to read reviews

        // Only authenticated users can create reviews
        allow create: if request.auth != null 
            && request.resource.data.courseId == courseId  // Ensure review belongs to the course
            && request.auth.uid == resource.data.userId;  // Only the reviewer can create

        // Only the review author can update or delete it 
        allow update, delete: if request.auth.uid == resource.data.userId;  
      }
    }

    // --- Enrollments Collection ---
    match /enrollments/{enrollmentId} {
      // Only the enrolled student or teachers and supervisors can read
      allow read: if request.auth.uid == resource.data.studentId || request.auth.token.userType in ['teacher', 'supervisor'];

      // Only authenticated users can create enrollments, ensuring it's for themselves
      allow create: if request.auth != null && request.auth.uid == resource.data.studentId;

      // Allow updates only by the student (e.g., progress) or teachers
      allow update: if request.auth.uid == resource.data.studentId || request.auth.token.userType == 'teacher';

      // Only teachers can delete enrollments
      allow delete: if request.auth.token.userType == 'teacher';
    }

    // --- Forums Collection ---
    match /forums/{forumId} {
      allow read: if true; // Allow anyone to read forums 

      // Only teachers can create forums 
      allow create: if request.auth != null && request.auth.token.userType == 'teacher'; 

      // --- Threads Subcollection ---
      match /threads/{threadId} {
        allow read: if true; // Anyone can read threads

        // Only enrolled students can create new threads
        allow create: if request.auth != null && request.auth.token.userType == 'student';

        // --- Posts Subcollection --- 
        match /posts/{postId} {
          allow read: if true;  

          // Only the author can create a post
          allow create: if request.auth.uid == resource.data.author; 

          // Only teachers or the author can update or delete a post
          allow update, delete: if request.auth.token.userType == 'teacher' || request.auth.uid == resource.data.author;

          // --- Comments Subcollection --- (Moved inside posts)
          match /comments/{commentId} {
            allow read: if true;  // Anyone can read comments 

            // Only authenticated users can create comments
            allow create: if request.auth != null
                          && request.resource.data.postId == postId 
                          && request.auth.uid == resource.data.author; 

            // Only the comment author or a teacher can update or delete it
            allow update, delete: if request.auth.uid == resource.data.author 
                                 || request.auth.token.userType == 'teacher';
          } 
        }
      }
    }

    // --- Chat Rooms Collection ---
    match /chatRooms/{chatRoomId} {
      // Rules for reading depend on the chat room type
      allow read: if (resource.data.type == 'course' && exists(/databases/$(database)/documents/courses/$(resource.data.courseId))) 
        || (resource.data.type == 'private' && request.auth.uid in resource.data.users);  

      // Only authenticated users can create
      allow create: if request.auth != null;

      // ... Add rules for updating or deleting based on your logic

      // --- Messages Subcollection --- 
      match /messages/{messageId} {
        // Allow users in the chat to read messages
        allow read: if exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)) && (
              (resource.data.type == 'course' && exists(/databases/$(database)/documents/courses/$(resource.data.courseId))) || 
              (resource.data.type == 'private' && request.auth.uid in resource.data.users)
            ); 

        // Only users in the chat room can create a message
        allow create: if exists(/databases/$(database)/documents/chatRooms/$(chatRoomId)) && (
              (resource.data.type == 'course' && exists(/databases/$(database)/documents/courses/$(resource.data.courseId))) ||
              (resource.data.type == 'private' && request.auth.uid in resource.data.users)
            ); 
      } 
    }

    // --- Moderation Collection ---
    match /moderation/{moderationId} {
      // Allow reads by the reporter, moderator (if action taken), and teachers or supervisors
      allow read: if request.auth.uid == resource.data.reportedBy 
                || request.auth.uid == resource.data.moderator 
                || request.auth.token.userType in ['teacher', 'supervisor']; 

      // Only authenticated users can create moderation reports
      allow create: if request.auth != null;

      // Only teachers and supervisors can update moderation reports
      allow update: if request.auth != null && request.auth.token.userType in ['teacher', 'supervisor'];

      allow delete: if false; // Prevent deleting moderation reports
    }

    // --- Resources Collection --- 
    match /resources/{resourceId} {
        allow read: if true;  // Anyone can read resources (you might restrict this later)
        allow create: if request.auth != null && request.auth.token.userType == 'teacher';
        allow update, delete: if request.auth.uid == resource.data.uploadedBy; // Resource owner can update/delete 
    }

    // ... (Rules for other collections like gamification)
  }
}