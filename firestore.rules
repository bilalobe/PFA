rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for better rule management
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isTeacher() {
      return isAuthenticated() && request.auth.token.userType == 'teacher';
    }
    
    function isSupervisor() {
      return isAuthenticated() && request.auth.token.userType == 'supervisor';
    }
    
    function isStudent() {
      return isAuthenticated() && request.auth.token.userType == 'student';
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.userType == 'admin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && request.auth.token.userType in roles;
    }

    // --- Users ---
    match /users/{userId} {
      allow read: if isAuthenticated(); 
      allow create, update: if isOwner(userId);
      allow delete: if false;  // Never allow users to delete their account directly
    }

    // --- Courses ---
    match /courses/{courseId} {
      allow read: if true; // Allow anyone to read courses
      allow create: if isTeacher(); 
      allow update, delete: if isAuthenticated() && 
            (request.auth.uid == resource.data.instructor || isSupervisor());  
     
      match /modules/{moduleId} {
        allow read: if true;
        allow create, update, delete: if isTeacher();

        // --- Resources Subcollection --- 
        match /resources/{resourceId} {
          allow read: if true;
          allow create, update, delete: if isTeacher();
        }

        // --- Quizzes Subcollection ---
        match /quizzes/{quizId} {
          allow read: if isAuthenticated();
          allow create, update, delete: if isTeacher();

          // --- Questions Subcollection ---
          match /questions/{questionId} {
            allow read: if isAuthenticated(); 
            allow create, update, delete: if isTeacher(); 
          }
          
          // --- Attempts Subcollection (new) ---
          match /attempts/{attemptId} {
            allow read: if isAuthenticated() && (
                          isOwner(resource.data.userId) || 
                          isTeacher() || 
                          isSupervisor()
                        );
            allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
            allow update: if isAuthenticated() && isOwner(resource.data.userId);
            allow delete: if false; // Quiz attempts should be preserved for academic integrity
          }
        }
      }

      // --- Comments --- 
      match /comments/{commentId} {
        allow read: if true; 
        allow create: if isAuthenticated() && 
                        request.resource.data.courseId == courseId &&
                        isOwner(request.resource.data.userId);
        allow update, delete: if isOwner(resource.data.userId) || isTeacher(); 
      }
      
      // --- Forum Subcollection (restructured) ---
      match /forums/{forumId} {
        allow read: if true;
        allow create: if isTeacher();
        allow update, delete: if isTeacher();
        
        // --- Threads Subcollection ---
        match /threads/{threadId} {
          allow read: if true;
          allow create: if isAuthenticated();
          allow update: if isOwner(resource.data.authorId) || isTeacher();
          allow delete: if isTeacher() || isSupervisor();
          
          // --- Posts Subcollection --- 
          match /posts/{postId} {
            allow read: if true; 
            allow create: if isAuthenticated();
            allow update: if isOwner(resource.data.author) || isTeacher();
            allow delete: if isOwner(resource.data.author) || isTeacher() || isSupervisor();
          }
        }
      }
    }

    // --- Reviews Collection ---
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                     isOwner(request.resource.data.userId) &&
                     request.resource.data.courseId != null;
      allow update: if isAuthenticated() &&
                     isOwner(resource.data.userId) &&
                     request.resource.data.courseId == resource.data.courseId &&
                     request.resource.data.userId == resource.data.userId;
      allow delete: if isAuthenticated() &&
                      (isOwner(resource.data.userId) || hasAnyRole(['teacher', 'supervisor']));
    }

    // --- Enrollments --- 
    match /enrollments/{enrollmentId} {
      allow read: if isAuthenticated() && (
                      isOwner(resource.data.studentId) || 
                      hasAnyRole(['teacher', 'supervisor'])
                   ); 
      allow create: if isAuthenticated() && isOwner(request.resource.data.studentId);  
      allow update: if (isOwner(resource.data.studentId) 
                      && request.resource.data.courseId == resource.data.courseId
                      && request.resource.data.studentId == resource.data.studentId
                      && (request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['progress', 'completedModules', 'completed'])))
                      || hasAnyRole(['teacher', 'supervisor']); 
      allow delete: if isTeacher(); 
    }

    // --- Chat Rooms --- 
    match /chatRooms/{chatRoomId} {
      // Improved access control with better validation
      function isInChatRoom() {
        return resource.data.type == 'course' && exists(/databases/$(database)/documents/courses/$(resource.data.courseId)) || 
               resource.data.type == 'private' && request.auth.uid in resource.data.users;
      }
      
      allow read: if isAuthenticated() && isInChatRoom(); 
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isInChatRoom();
      allow delete: if isTeacher() || isSupervisor();

      match /messages/{messageId} {
        allow read: if isAuthenticated() && isInChatRoom();
        allow create: if isAuthenticated() && isInChatRoom();
        allow update: if isOwner(resource.data.sender);
        allow delete: if isOwner(resource.data.sender) || isTeacher() || isSupervisor();
      } 
    }

    // --- Moderation --- 
    match /moderation/{moderationId} {
      allow read: if isAuthenticated() && (
                      isOwner(resource.data.reportedBy) || 
                      isOwner(resource.data.moderator) || 
                      hasAnyRole(['teacher', 'supervisor'])
                  ); 
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && hasAnyRole(['teacher', 'supervisor']); 
      allow delete: if false;
    }

    // --- Resources ---
    match /resources/{resourceId} {
      allow read: if isAuthenticated();
      allow create: if isTeacher();
      allow update, delete: if isOwner(resource.data.uploadedBy) || isSupervisor(); 
    }
    
    // --- Notifications (new) ---
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isTeacher() || isSupervisor() || isAdmin();
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // --- Leaderboard Data (new) ---
    match /userForumPoints/{userId} {
      allow read: if true;
      allow create, update: if isTeacher() || isSupervisor() || isAdmin();
      allow delete: if isTeacher() || isSupervisor() || isAdmin();
    }

    // --- Live Sessions ---
    match /liveSessions/{sessionId} {
      allow read: if isAuthenticated() && (
        resource.data.createdBy == request.auth.uid || 
        existsEnrollment(request.auth.uid, resource.data.courseId)
      );
      allow create: if isTeacher() || isSupervisor();
      allow update: if resource.data.createdBy == request.auth.uid;
      allow delete: if resource.data.createdBy == request.auth.uid;
      
      // Session polls
      match /polls/{pollId} {
        allow read: if isAuthenticated() && (
          get(/databases/$(database)/documents/liveSessions/$(sessionId)).data.createdBy == request.auth.uid || 
          existsEnrollment(request.auth.uid, get(/databases/$(database)/documents/liveSessions/$(sessionId)).data.courseId)
        );
        allow create: if isAuthenticated() && (
          get(/databases/$(database)/documents/liveSessions/$(sessionId)).data.createdBy == request.auth.uid
        );
        allow update: if isAuthenticated() && (
          get(/databases/$(database)/documents/liveSessions/$(sessionId)).data.createdBy == request.auth.uid
        );
        allow delete: if isAuthenticated() && (
          get(/databases/$(database)/documents/liveSessions/$(sessionId)).data.createdBy == request.auth.uid
        );
      }
    }
  }
}